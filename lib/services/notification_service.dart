import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:timezone/timezone.dart' as tz;
import 'package:timezone/data/latest.dart' as tz;
import 'package:permission_handler/permission_handler.dart';
import '../models/settings.dart';
import './notification_sound_service.dart';

/// üîî Servi√ßo respons√°vel por gerenciar notifica√ß√µes locais
///
/// Este servi√ßo funciona da seguinte forma:
///
/// 1. **Inicializa√ß√£o**: Configura as notifica√ß√µes para cada plataforma
/// 2. **Permiss√µes**: Solicita permiss√µes do sistema operacional
/// 3. **Agendamento**: Programa notifica√ß√µes para hor√°rios espec√≠ficos
/// 4. **Cancelamento**: Remove notifica√ß√µes quando desabilitadas
class NotificationService {
  static final FlutterLocalNotificationsPlugin _notifications =
      FlutterLocalNotificationsPlugin();

  /// üöÄ Inicializa o servi√ßo de notifica√ß√µes
  ///
  /// **Por que cada plataforma √© diferente?**
  /// - **Android**: Usa √≠cones, canais de notifica√ß√£o
  /// - **iOS**: Requer permiss√µes especiais, sons diferentes
  /// - **macOS**: Tem seu pr√≥prio sistema de notifica√ß√µes
  /// - **Windows/Linux**: Sistemas de notifica√ß√£o nativos diferentes
  static Future<void> initialize() async {
    // Inicializar timezone (necess√°rio para agendar notifica√ß√µes)
    tz.initializeTimeZones();

    // ‚öôÔ∏è Configura√ß√µes para Android
    const AndroidInitializationSettings androidSettings =
        AndroidInitializationSettings('@mipmap/ic_launcher');

    // ‚öôÔ∏è Configura√ß√µes para iOS
    const DarwinInitializationSettings iosSettings =
        DarwinInitializationSettings(
      requestSoundPermission: true,
      requestBadgePermission: true,
      requestAlertPermission: true,
    );

    // ‚öôÔ∏è Configura√ß√µes para macOS
    const DarwinInitializationSettings macOSSettings =
        DarwinInitializationSettings(
      requestSoundPermission: true,
      requestBadgePermission: true,
      requestAlertPermission: true,
    );

    // ‚öôÔ∏è Configura√ß√µes para Linux
    const LinuxInitializationSettings linuxSettings =
        LinuxInitializationSettings(
      defaultActionName: 'Abrir TaskKnight',
    );

    // ‚öôÔ∏è Configura√ß√£o geral para todas as plataformas
    const InitializationSettings settings = InitializationSettings(
      android: androidSettings,
      iOS: iosSettings,
      macOS: macOSSettings,
      linux: linuxSettings,
    );

    // üîÑ Inicializar o plugin
    await _notifications.initialize(
      settings,
      onDidReceiveNotificationResponse: _onNotificationTapped,
    );

    // üì± Solicitar permiss√µes (principalmente para iOS/macOS)
    await _requestPermissions();

    // üßπ CR√çTICO: Sincronizar estado com Hive para resolver notifica√ß√µes √≥rf√£s
    await _syncNotificationStateWithHive();
  }

  /// üîê Solicita permiss√µes do sistema
  ///
  /// **Por que precisamos de permiss√µes?**
  /// - iOS/macOS s√£o muito restritivos com notifica√ß√µes
  /// - Android 13+ tamb√©m requer permiss√µes expl√≠citas
  /// - O usu√°rio precisa aprovar que o app pode enviar notifica√ß√µes
  static Future<void> _requestPermissions() async {
    if (defaultTargetPlatform == TargetPlatform.iOS ||
        defaultTargetPlatform == TargetPlatform.macOS) {
      await _notifications
          .resolvePlatformSpecificImplementation<
              IOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(
            alert: true,
            badge: true,
            sound: true,
          );

      await _notifications
          .resolvePlatformSpecificImplementation<
              MacOSFlutterLocalNotificationsPlugin>()
          ?.requestPermissions(
            alert: true,
            badge: true,
            sound: true,
          );
    }

    // Android 13+ requer permiss√£o para notifica√ß√µes
    if (defaultTargetPlatform == TargetPlatform.android) {
      final status = await Permission.notification.request();
      if (status.isDenied) {
        if (kDebugMode) {
          print('‚ùå Permiss√£o de notifica√ß√£o negada no Android');
        }
      }
    }
  }

  /// üìÖ Agenda notifica√ß√µes di√°rias baseadas nas configura√ß√µes do usu√°rio
  ///
  /// **Como funciona o agendamento?**
  /// 1. L√™ as configura√ß√µes salvas no Hive
  /// 2. Calcula o pr√≥ximo hor√°rio de notifica√ß√£o
  /// 3. Agenda a notifica√ß√£o usando timezone
  /// 4. Configura para repetir diariamente
  static Future<void> scheduleTaskReminder() async {
    try {
      // üìñ Buscar configura√ß√µes salvas no Hive
      final settings = await AppSettings.getSettings();

      // ‚ùå Se notifica√ß√µes est√£o desabilitadas, n√£o fazer nada
      if (!settings.pushNotificationsEnabled) {
        if (kDebugMode) {
          print('üîï Notifica√ß√µes desabilitadas pelo usu√°rio');
        }
        return;
      }

      // üïê Calcular pr√≥ximo hor√°rio de notifica√ß√£o
      final now = DateTime.now();
      var scheduledDate = DateTime(
        now.year,
        now.month,
        now.day,
        settings.notificationHour,
        settings.notificationMinute,
      );

      // Se o hor√°rio j√° passou hoje, agendar para amanh√£
      if (scheduledDate.isBefore(now)) {
        scheduledDate = scheduledDate.add(const Duration(days: 1));
      }

      // üåç Converter para timezone (necess√°rio para notifica√ß√µes agendadas)
      final tz.TZDateTime tzScheduledDate = tz.TZDateTime.from(
        scheduledDate,
        tz.local,
      );

      // üéµ Preparar sons personalizados de forma unificada
      final sounds = await NotificationSoundService.prepareSounds();

      // üîî Detalhes da notifica√ß√£o para Android
      AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
        'daily_reminder',
        'Lembretes Di√°rios TaskKnight',
        channelDescription:
            'Notifica√ß√µes √©picas para lembrar de suas aventuras!',
        importance: Importance.max,
        priority: Priority.high,
        icon: '@mipmap/ic_launcher',
        // üîä SOM PERSONALIZADO: Arquivo na pasta android/app/src/main/res/raw/
        sound: RawResourceAndroidNotificationSound('notification_sound'),
        // üí´ EFEITOS VISUAIS
        enableLights: true,
        color: Color(0xFF4CAF50), // Cor verde do TaskKnight
        enableVibration: true,
        playSound: true, // Garante som padr√£o se custom falhar
      );

      // üîî Detalhes da notifica√ß√£o para iOS
      DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
        // üîä SOM UNIFICADO: Usa seu MP3 convertido dos assets
        sound: sounds['ios'], // Se null, usa som padr√£o
        badgeNumber: 1,
      );

      // üîî Detalhes da notifica√ß√£o para macOS
      DarwinNotificationDetails macOSDetails = DarwinNotificationDetails(
        presentAlert: true,
        presentBadge: true,
        presentSound: true,
        // üîä SOM DEBUG: Testar diferentes op√ß√µes para macOS
        sound: null, // TEMP: Use system default to test if custom sounds work
        badgeNumber: 1,
      );

      final NotificationDetails platformDetails = NotificationDetails(
        android: androidDetails,
        iOS: iosDetails,
        macOS: macOSDetails,
      );

      // üì® Agendar a notifica√ß√£o
      await _notifications.zonedSchedule(
        0, // ID da notifica√ß√£o
        '‚öîÔ∏è TaskKnight - Suas Tarefas Te Esperam!', // üìù T√çTULO (aparece em destaque)
        'üéØ Hora de completar suas miss√µes e derrotar os slimes! üêâ', // üìù TEXTO (corpo da notifica√ß√£o)
        tzScheduledDate, // Quando disparar
        platformDetails, // Configura√ß√µes da plataforma
        matchDateTimeComponents:
            DateTimeComponents.time, // Repetir diariamente no mesmo hor√°rio
        uiLocalNotificationDateInterpretation:
            UILocalNotificationDateInterpretation.absoluteTime,
      );

      if (kDebugMode) {
        print('‚úÖ Notifica√ß√£o agendada para: $scheduledDate');
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro ao agendar notifica√ß√£o: $e');
      }
    }
  }

  /// ÔøΩ Sincroniza o estado das notifica√ß√µes com as configura√ß√µes do Hive
  ///
  /// **RESOLVE O PROBLEMA DAS NOTIFICA√á√ïES √ìRF√ÉS:**
  ///
  /// Cen√°rio problem√°tico:
  /// 1. Usu√°rio ativa notifica√ß√£o ‚Üí Sistema agenda
  /// 2. Usu√°rio limpa dados do app ‚Üí Hive reseta para padr√£o
  /// 3. Hive mostra desativado, mas notifica√ß√£o ainda dispara!
  ///
  /// Esta fun√ß√£o:
  /// - ‚úÖ Verifica se h√° notifica√ß√µes ativas no sistema
  /// - ‚úÖ Compara com as configura√ß√µes do Hive
  /// - ‚úÖ Remove notifica√ß√µes √≥rf√£s automaticamente
  /// - ‚úÖ Reagenda se necess√°rio baseado no Hive
  static Future<void> _syncNotificationStateWithHive() async {
    try {
      // üìñ Buscar configura√ß√µes atuais do Hive
      final settings = await AppSettings.getSettings();

      // üîç Verificar notifica√ß√µes ativas no sistema
      final List<PendingNotificationRequest> pendingNotifications =
          await _notifications.pendingNotificationRequests();

      if (kDebugMode) {
        print(
            'üîç Notifica√ß√µes pendentes no sistema: ${pendingNotifications.length}');
        for (var notification in pendingNotifications) {
          print('   üìã ID: ${notification.id}, T√≠tulo: ${notification.title}');
        }
      }

      // üßπ Cen√°rio 1: Hive diz que est√° desabilitado, mas h√° notifica√ß√µes ativas
      if (!settings.pushNotificationsEnabled &&
          pendingNotifications.isNotEmpty) {
        if (kDebugMode) {
          print('‚ö†Ô∏è NOTIFICA√á√ïES √ìRF√ÉS DETECTADAS!');
          print('   Hive: pushNotificationsEnabled = false');
          print(
              '   Sistema: ${pendingNotifications.length} notifica√ß√µes ativas');
          print('üßπ Limpando notifica√ß√µes √≥rf√£s...');
        }

        // Cancelar todas as notifica√ß√µes √≥rf√£s
        await _notifications.cancelAll();

        if (kDebugMode) {
          print('‚úÖ Notifica√ß√µes √≥rf√£s removidas com sucesso!');
        }
      }

      // üîÑ Cen√°rio 2: Hive diz que est√° habilitado, reagendar para garantir
      else if (settings.pushNotificationsEnabled) {
        if (kDebugMode) {
          print('üîî Notifica√ß√µes habilitadas no Hive, reagendando...');
        }

        // Cancelar notifica√ß√µes existentes e reagendar com configura√ß√µes atuais
        await _notifications.cancelAll();
        await scheduleTaskReminder();
      }

      // ‚úÖ Cen√°rio 3: Tudo sincronizado (Hive desabilitado + nenhuma notifica√ß√£o ativa)
      else {
        if (kDebugMode) {
          print('‚úÖ Estado sincronizado: Notifica√ß√µes desabilitadas em ambos');
        }
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå Erro ao sincronizar notifica√ß√µes: $e');
      }
    }
  }

  /// ÔøΩüö´ Cancela todas as notifica√ß√µes agendadas
  ///
  /// **Quando usar?**
  /// - Quando o usu√°rio desabilita as notifica√ß√µes
  /// - Quando o usu√°rio muda o hor√°rio (cancela a antiga, agenda nova)
  /// - Quando o app √© desinstalado
  static Future<void> cancelAllNotifications() async {
    await _notifications.cancelAll();
    if (kDebugMode) {
      print('üîï Todas as notifica√ß√µes foram canceladas');
    }
  }

  /// üì± Manipula quando o usu√°rio toca na notifica√ß√£o
  ///
  /// **O que acontece aqui?**
  /// - O app √© aberto (se estava fechado)
  /// - Pode navegar para uma tela espec√≠fica
  /// - Pode mostrar informa√ß√µes relevantes
  static void _onNotificationTapped(NotificationResponse response) {
    if (kDebugMode) {
      print('üîî Notifica√ß√£o tocada: ${response.payload}');
    }

    // Aqui voc√™ pode adicionar l√≥gica para:
    // - Navegar para uma tela espec√≠fica
    // - Mostrar as tarefas pendentes
    // - Abrir a tela de adicionar tarefa
  }

  /// üîÑ For√ßa uma sincroniza√ß√£o manual entre Hive e notifica√ß√µes do sistema
  ///
  /// **Use esta fun√ß√£o quando:**
  /// - Usu√°rio relatar notifica√ß√µes fantasma
  /// - Ap√≥s restaurar backup do app
  /// - Em telas de configura√ß√£o para "limpar" o estado
  static Future<void> forceSyncNotifications() async {
    await _syncNotificationStateWithHive();
  }

  /// üìã Retorna informa√ß√µes sobre notifica√ß√µes ativas (para debug/diagn√≥stico)
  static Future<Map<String, dynamic>> getNotificationStatus() async {
    try {
      final settings = await AppSettings.getSettings();
      final allPendingNotifications =
          await _notifications.pendingNotificationRequests();

      // üö´ FILTER OUT test notifications - only count daily reminders
      final dailyNotifications = allPendingNotifications
          .where((n) => n.id != 99999) // Exclude test notification ID
          .toList();

      if (kDebugMode) {
        print('üîç Total pending: ${allPendingNotifications.length}');
        print('üîç Daily only: ${dailyNotifications.length}');
        print(
            'üîç Test notifications filtered out: ${allPendingNotifications.length - dailyNotifications.length}');
      }

      return {
        'hive_enabled': settings.pushNotificationsEnabled,
        'hive_time': settings.notificationTimeString,
        'system_notifications_count':
            dailyNotifications.length, // Only count daily notifications
        'system_notifications': dailyNotifications
            .map((n) => {
                  'id': n.id,
                  'title': n.title,
                  'body': n.body,
                })
            .toList(),
        'is_synced': (settings.pushNotificationsEnabled &&
                dailyNotifications.isNotEmpty) ||
            (!settings.pushNotificationsEnabled && dailyNotifications.isEmpty),
      };
    } catch (e) {
      return {
        'error': e.toString(),
      };
    }
  }

  /// üß™ Sends a one-time test notification (development only)
  /// ‚ö†Ô∏è This is a TEMPORARY test - does NOT schedule recurring notifications
  static Future<void> sendTestNotification() async {
    if (kDebugMode) {
      print('üß™ SINGLE TEST - NOT scheduling recurring notifications');
      print(
          'üîä Testing notification_sound.mp3 from android/app/src/main/res/raw/');
    }

    // üîä ANDROID: Use raw resource directly (working!)
    const AndroidNotificationDetails androidDetails =
        AndroidNotificationDetails(
      'test_only_channel', // ‚ö†Ô∏è DIFFERENT channel - won't interfere with daily notifications
      'Test Notification',
      channelDescription: 'One-time test notification with custom sound',
      importance: Importance.max,
      priority: Priority.high,
      icon: '@mipmap/ic_launcher',
      sound: RawResourceAndroidNotificationSound('notification_sound'),
      enableLights: true,
      color: Color(0xFF4CAF50),
      enableVibration: true,
      playSound: true,
    );

    // üîä iOS: Test with custom sound
    const DarwinNotificationDetails iosDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'notification_sound.mp3', // Try direct filename for iOS
      badgeNumber: 1,
    );

    // üîä macOS: Test with custom sound - try AIFF format
    const DarwinNotificationDetails macOSDetails = DarwinNotificationDetails(
      presentAlert: true,
      presentBadge: true,
      presentSound: true,
      sound: 'notification_sound.aiff', // Try AIFF format for macOS
      badgeNumber: 1,
    );

    const NotificationDetails platformDetails = NotificationDetails(
      android: androidDetails,
      iOS: iosDetails,
      macOS: macOSDetails,
    );

    // üéØ SINGLE notification with unique ID - NO recurring schedule
    await _notifications.show(
      99999, // Unique test ID - different from daily notifications
      'üß™ Test - TaskKnight Working!',
      '‚öîÔ∏è Get ready warrior! Your epic tasks await! üêâ‚ú®',
      platformDetails,
    );

    if (kDebugMode) {
      print('‚úÖ Single test notification sent - no recurring schedule created');
    }
  }
}
